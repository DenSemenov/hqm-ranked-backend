// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hqm_ranked_backend.Models.DbModels;

#nullable disable

namespace hqm_ranked_database.Migrations
{
    [DbContext(typeof(RankedDb))]
    [Migration("20240916152431_WT3")]
    partial class WT3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameGameInvites", b =>
                {
                    b.Property<Guid>("GameInvitesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.HasKey("GameInvitesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameInvites");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.AdminStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Expiration")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdminStories");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Bans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BannedPlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BannedPlayerId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Change")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("InvitedPlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvitedPlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Elo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Elos");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxX")
                        .HasColumnType("integer");

                    b.Property<int>("MaxY")
                        .HasColumnType("integer");

                    b.Property<int>("MinX")
                        .HasColumnType("integer");

                    b.Property<int>("MinY")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.EventWinners", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlayerId");

                    b.ToTable("EventWinners");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Events", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BluePoints")
                        .HasColumnType("integer");

                    b.Property<int>("BlueScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BlueTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstanceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MvpId")
                        .HasColumnType("integer");

                    b.Property<int?>("RedPoints")
                        .HasColumnType("integer");

                    b.Property<int>("RedScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RedTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlueTeamId");

                    b.HasIndex("MvpId");

                    b.HasIndex("RedTeamId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("StateId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GameInviteVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameInviteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameInviteId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameInviteVotes");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GameInvites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GamesCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("InvitedTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InvitedTeamId");

                    b.ToTable("GameInvites");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GamePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<int>("Conceded")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Goals")
                        .HasColumnType("integer");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Ping")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<double>("Possession")
                        .HasColumnType("double precision");

                    b.Property<int>("Saves")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("Shots")
                        .HasColumnType("integer");

                    b.Property<int>("Team")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.NicknameChanges", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OldNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("NicknameChanges");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PatrolDecision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsReported")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ReportId");

                    b.ToTable("PatrolDecisions");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAcceptedRules")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LimitType")
                        .HasColumnType("integer");

                    b.Property<double>("LimitTypeValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlayerCalcStatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplayGoalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ShowLocation")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CostId");

                    b.HasIndex("PlayerCalcStatsId")
                        .IsUnique();

                    b.HasIndex("ReplayGoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PlayerCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PlayerInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerInvites");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PlayerNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameEnded")
                        .HasColumnType("integer");

                    b.Property<int>("GameStarted")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogsCount")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerNotifications");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Packet")
                        .HasColumnType("bigint");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReplayDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayDataId");

                    b.ToTable("ReplayChats");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Max")
                        .HasColumnType("bigint");

                    b.Property<long>("Min")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("ReplayData");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayFragment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<long>("Max")
                        .HasColumnType("bigint");

                    b.Property<long>("Min")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ReplayDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReplayDataId");

                    b.ToTable("ReplayFragments");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GoalBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MusicId")
                        .HasColumnType("uuid");

                    b.Property<long>("Packet")
                        .HasColumnType("bigint");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReplayDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MusicId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayDataId");

                    b.ToTable("ReplayGoals");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayHighlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Packet")
                        .HasColumnType("bigint");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReplayDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayDataId");

                    b.ToTable("ReplayHighlights");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Reports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromId")
                        .HasColumnType("integer");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReasonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tick")
                        .HasColumnType("integer");

                    b.Property<int>("ToId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("GameId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("ToId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BlueScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstanceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoggedIn")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("integer");

                    b.Property<int>("RedScore")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TeamMax")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordAppClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DiscordApprove")
                        .HasColumnType("boolean");

                    b.Property<string>("DiscordJoinLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordNewsWebhook")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordNotificationWebhook")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NewPlayerApproveRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("NextGameCheckGames")
                        .HasColumnType("integer");

                    b.Property<int>("NicknameChangeDaysLimit")
                        .HasColumnType("integer");

                    b.Property<string>("PushJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReplayStoreDays")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredGamesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3Bucket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShadowBanReportsCount")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyPlaylist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifySecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartingElo")
                        .HasColumnType("integer");

                    b.Property<int>("TeamsMaxPlayer")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramBotToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WebhookCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.States", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AssistantId")
                        .HasColumnType("integer");

                    b.Property<int?>("CaptainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CaptainId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.TeamPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayers");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AwardType")
                        .HasColumnType("integer");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ContractSelect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ContractSelects");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.PlayerCalcStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Assists")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Goals")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Mvp")
                        .HasColumnType("double precision");

                    b.Property<double>("Saves")
                        .HasColumnType("double precision");

                    b.Property<double>("Shots")
                        .HasColumnType("double precision");

                    b.Property<double>("Winrate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PlayerCalcStats");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.PlayerLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcceptLang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<int>("LoginInstance")
                        .HasColumnType("integer");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerLogins");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ShopPurchases", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("ShopPurchases");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.TransferMarket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("Positions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TransferMarkets");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.TransferMarketResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int[]>("Position")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("TransferMarketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TransferMarketId");

                    b.ToTable("TransferMarketResponses");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WeeklyTourneys");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlueTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayoffType")
                        .HasColumnType("integer");

                    b.Property<Guid>("RedTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeeklyTourneyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlueTeamId");

                    b.HasIndex("GameId");

                    b.HasIndex("RedTeamId");

                    b.HasIndex("WeeklyTourneyId");

                    b.ToTable("WeeklyTourneyGame");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("WeeklyTourneyPlayers");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int[]>("Positions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("WeeklyTourneyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WeeklyTourneyId");

                    b.ToTable("WeeklyTourneyRequests");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WeeklyTourneyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyTourneyId");

                    b.ToTable("WeeklyTourneyTeams");
                });

            modelBuilder.Entity("GameGameInvites", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.GameInvites", null)
                        .WithMany()
                        .HasForeignKey("GameInvitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Avatar", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Bans", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "BannedPlayer")
                        .WithMany("Bans")
                        .HasForeignKey("BannedPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannedPlayer");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Budget", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "InvitedPlayer")
                        .WithMany()
                        .HasForeignKey("InvitedPlayerId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "Team")
                        .WithMany("Budgets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedPlayer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Elo", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.EventWinners", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Events", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Game", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "BlueTeam")
                        .WithMany()
                        .HasForeignKey("BlueTeamId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Mvp")
                        .WithMany()
                        .HasForeignKey("MvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "RedTeam")
                        .WithMany()
                        .HasForeignKey("RedTeamId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Season", "Season")
                        .WithMany("Games")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.States", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlueTeam");

                    b.Navigation("Mvp");

                    b.Navigation("RedTeam");

                    b.Navigation("Season");

                    b.Navigation("State");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GameInviteVote", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.GameInvites", "GameInvite")
                        .WithMany("GameInviteVotes")
                        .HasForeignKey("GameInviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameInvite");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GameInvites", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "InvitedTeam")
                        .WithMany()
                        .HasForeignKey("InvitedTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedTeam");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GamePlayer", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany("GamePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.NicknameChanges", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany("NicknameChanges")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PatrolDecision", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Reports", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Player", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.PlayerCost", "Cost")
                        .WithMany()
                        .HasForeignKey("CostId");

                    b.HasOne("hqm_ranked_database.DbModels.PlayerCalcStats", "PlayerCalcStats")
                        .WithOne("Player")
                        .HasForeignKey("hqm_ranked_backend.Models.DbModels.Player", "PlayerCalcStatsId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.ReplayGoal", null)
                        .WithMany("Likes")
                        .HasForeignKey("ReplayGoalId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cost");

                    b.Navigation("PlayerCalcStats");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PlayerInvite", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.PlayerNotification", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayChat", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.ReplayData", "ReplayData")
                        .WithMany("ReplayChats")
                        .HasForeignKey("ReplayDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ReplayData");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayData", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Game", "Game")
                        .WithMany("ReplayDatas")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayFragment", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.ReplayData", "ReplayData")
                        .WithMany("ReplayFragments")
                        .HasForeignKey("ReplayDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayData");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayGoal", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Music", "Music")
                        .WithMany()
                        .HasForeignKey("MusicId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.ReplayData", "ReplayData")
                        .WithMany("ReplayGoals")
                        .HasForeignKey("ReplayDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Music");

                    b.Navigation("Player");

                    b.Navigation("ReplayData");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayHighlight", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.ReplayData", "ReplayData")
                        .WithMany("ReplayHighlight")
                        .HasForeignKey("ReplayDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ReplayData");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Reports", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Rule", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Game");

                    b.Navigation("Reason");

                    b.Navigation("To");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Team", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Captain")
                        .WithMany()
                        .HasForeignKey("CaptainId");

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Captain");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.TeamPlayer", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.Award", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany("Awards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ContractSelect", b =>
                {
                    b.HasOne("hqm_ranked_database.DbModels.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany("ContractSelects")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.PlayerLogin", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany("PlayerLogins")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ShopPurchases", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_database.DbModels.ShopItem", "ShopItem")
                        .WithMany("ShopPurchases")
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ShopItem");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.TransferMarket", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.TransferMarketResponse", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_database.DbModels.TransferMarket", "TransferMarket")
                        .WithMany("TransferMarketResponses")
                        .HasForeignKey("TransferMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TransferMarket");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyGame", b =>
                {
                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourneyTeam", "BlueTeam")
                        .WithMany()
                        .HasForeignKey("BlueTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_backend.Models.DbModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourneyTeam", "RedTeam")
                        .WithMany()
                        .HasForeignKey("RedTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourney", "WeeklyTourney")
                        .WithMany("WeeklyTourneyGames")
                        .HasForeignKey("WeeklyTourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlueTeam");

                    b.Navigation("Game");

                    b.Navigation("RedTeam");

                    b.Navigation("WeeklyTourney");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyPlayer", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourneyTeam", "Team")
                        .WithMany("WeeklyTourneyPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyRequest", b =>
                {
                    b.HasOne("hqm_ranked_backend.Models.DbModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourney", "WeeklyTourney")
                        .WithMany("WeeklyTourneyRequests")
                        .HasForeignKey("WeeklyTourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("WeeklyTourney");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyTeam", b =>
                {
                    b.HasOne("hqm_ranked_database.DbModels.WeeklyTourney", "WeeklyTourney")
                        .WithMany("WeeklyTourneyTeams")
                        .HasForeignKey("WeeklyTourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeeklyTourney");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Game", b =>
                {
                    b.Navigation("GamePlayers");

                    b.Navigation("ReplayDatas");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.GameInvites", b =>
                {
                    b.Navigation("GameInviteVotes");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Player", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Bans");

                    b.Navigation("ContractSelects");

                    b.Navigation("GamePlayers");

                    b.Navigation("NicknameChanges");

                    b.Navigation("PlayerLogins");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayData", b =>
                {
                    b.Navigation("ReplayChats");

                    b.Navigation("ReplayFragments");

                    b.Navigation("ReplayGoals");

                    b.Navigation("ReplayHighlight");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.ReplayGoal", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Season", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("hqm_ranked_backend.Models.DbModels.Team", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.PlayerCalcStats", b =>
                {
                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.ShopItem", b =>
                {
                    b.Navigation("ShopPurchases");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.TransferMarket", b =>
                {
                    b.Navigation("TransferMarketResponses");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourney", b =>
                {
                    b.Navigation("WeeklyTourneyGames");

                    b.Navigation("WeeklyTourneyRequests");

                    b.Navigation("WeeklyTourneyTeams");
                });

            modelBuilder.Entity("hqm_ranked_database.DbModels.WeeklyTourneyTeam", b =>
                {
                    b.Navigation("WeeklyTourneyPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
